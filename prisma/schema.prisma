// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// Supplier/Customer Models
// ============================================================================

model Supplier {
  id            String   @id @default(cuid())
  name          String   @db.VarChar(255)
  code          String   @unique @db.VarChar(50)
  email         String?  @db.VarChar(255)
  phone         String?  @db.VarChar(20)
  address       String?  @db.Text
  type          String   @default("supplier") // supplier, logistics, etc
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  inboundRequests InboundRequest[]
  schedules       InboundSchedule[]

  @@index([code])
  @@index([type])
}

// ============================================================================
// Warehouse Models
// ============================================================================

model Warehouse {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  code      String   @unique @db.VarChar(50)
  address   String?  @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  zones    Zone[]
  products WarehouseProduct[]

  @@index([code])
}

model Zone {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  code        String   @db.VarChar(50)
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  locations Location[]

  @@unique([warehouseId, code])
  @@index([warehouseId])
}

model Location {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  code      String   @db.VarChar(50)
  zoneId    String
  zone      Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  capacity  Int      @default(100)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([zoneId, code])
  @@index([zoneId])
}

// ============================================================================
// Product Models
// ============================================================================

model Product {
  id          String   @id @default(cuid())
  code        String   @unique @db.VarChar(50)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  barcode     String?  @unique @db.VarChar(100)
  sku         String?  @unique @db.VarChar(100)
  price       Decimal  @default(0) @db.Decimal(10, 2)
  weight      Decimal? @db.Decimal(10, 2) // kg
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  warehouseProducts WarehouseProduct[]
  inboundItems      InboundRequestItem[]
  outboundItems     OutboundOrderItem[]

  @@index([code])
  @@index([barcode])
}

model WarehouseProduct {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  quantity    Int      @default(0)
  safeStock   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, warehouseId])
  @@index([productId])
  @@index([warehouseId])
}

// ============================================================================
// Inbound Models
// ============================================================================

model InboundRequest {
  id              String   @id @default(cuid())
  requestNumber   String   @unique @db.VarChar(50)
  supplierId      String
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  status          String   @default("draft") // draft, submitted, approved, rejected
  totalQuantity   Int      @default(0)
  totalAmount     Decimal  @default(0) @db.Decimal(12, 2)
  requestDate     DateTime @default(now())
  expectedDate    DateTime
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  items     InboundRequestItem[]
  schedules InboundSchedule[]

  @@index([supplierId])
  @@index([status])
  @@index([requestDate])
}

model InboundRequestItem {
  id        String @id @default(cuid())
  requestId String
  request   InboundRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)

  @@index([requestId])
  @@index([productId])
}

model InboundSchedule {
  id              String   @id @default(cuid())
  scheduleNumber  String   @unique @db.VarChar(50)
  requestId       String
  request         InboundRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  supplierId      String
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  status          String   @default("pending") // pending, on-schedule, delayed, arrived
  expectedDate    DateTime
  estimatedArrival DateTime?
  carrier         String?  @db.VarChar(100)
  trackingNumber  String?  @db.VarChar(100)
  totalQuantity   Int      @default(0)
  receivedQuantity Int     @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([requestId])
  @@index([supplierId])
  @@index([status])
  @@index([expectedDate])
}

model InboundApproval {
  id              String   @id @default(cuid())
  approvalNumber  String   @unique @db.VarChar(50)
  requestId       String   @unique
  status          String   @default("pending") // pending, approved, rejected
  approverName    String?  @db.VarChar(100)
  approvalDate    DateTime?
  rejectionReason String?  @db.Text
  allocatedZone   String?  @db.VarChar(100)
  allocatedLocation String? @db.VarChar(100)
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([status])
  @@index([approvalDate])
}

// ============================================================================
// Outbound Models
// ============================================================================

model OutboundOrder {
  id              String   @id @default(cuid())
  orderNumber     String   @unique @db.VarChar(50)
  orderDate       DateTime @default(now())
  status          String   @default("pending") // pending, picking, packing, shipped, delivered
  totalQuantity   Int      @default(0)
  totalAmount     Decimal  @default(0) @db.Decimal(12, 2)
  shippingDate    DateTime?
  expectedDelivery DateTime?
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  items     OutboundOrderItem[]
  pickings  PickingTask[]
  packings  PackingTask[]

  @@index([orderDate])
  @@index([status])
  @@index([expectedDelivery])
}

model OutboundOrderItem {
  id        String @id @default(cuid())
  orderId   String
  order     OutboundOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  pickedQty Int     @default(0)
  packedQty Int     @default(0)

  @@index([orderId])
  @@index([productId])
}

// ============================================================================
// Picking Models
// ============================================================================

model PickingTask {
  id              String   @id @default(cuid())
  pickingNumber   String   @unique @db.VarChar(50)
  orderId         String
  order           OutboundOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status          String   @default("pending") // pending, picking, completed, cancelled
  assignedWorker  String?  @db.VarChar(100)
  startTime       DateTime?
  completionTime  DateTime?
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([status])
  @@index([assignedWorker])
}

// ============================================================================
// Packing Models
// ============================================================================

model PackingTask {
  id              String   @id @default(cuid())
  packingNumber   String   @unique @db.VarChar(50)
  orderId         String
  order           OutboundOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status          String   @default("pending") // pending, packing, completed
  station         String?  @db.VarChar(50)
  assignedWorker  String?  @db.VarChar(100)
  boxSize         String?  @db.VarChar(20) // small, medium, large, xlarge
  weight          Decimal? @db.Decimal(10, 2)
  startTime       DateTime?
  completionTime  DateTime?
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([status])
  @@index([station])
}

// ============================================================================
// Audit Log
// ============================================================================

model AuditLog {
  id        String   @id @default(cuid())
  action    String   @db.VarChar(100)
  entity    String   @db.VarChar(100)
  entityId  String   @db.VarChar(100)
  userId    String?  @db.VarChar(100)
  changes   String?  @db.Text
  createdAt DateTime @default(now())

  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
}
